<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>eSight Eyewear</title><link href="/" rel="alternate"></link><link href="/feeds/all.atom.xml" rel="self"></link><id>/</id><updated>2015-11-04T00:00:00+01:00</updated><entry><title>About eSight</title><link href="/about-esight.html" rel="alternate"></link><published>2015-11-04T00:00:00+01:00</published><updated>2015-11-04T00:00:00+01:00</updated><author><name>Nick Beirne</name></author><id>tag:None,2015-11-04:/about-esight.html</id><summary type="html">&lt;p&gt;eSight Eyewear creates classes that help people with visual impairments see again. Their headset gives Legally Blind people helpful tools that make their lives easier. There are plenty of stories about &lt;a href="http://www.nydailynews.com/news/national/blind-12-year-old-sees-mom-time-electronic-glasses-article-1.2618270"&gt;kids seeing their parents for the first time&lt;/a&gt; or even a &lt;a href="http://www.nydailynews.com/news/national/blind-12-year-old-sees-mom-time-electronic-glasses-article-1.2618270"&gt;second chance to see their own wedding&lt;/a&gt;. While …&lt;/p&gt;</summary><content type="html">&lt;p&gt;eSight Eyewear creates classes that help people with visual impairments see again. Their headset gives Legally Blind people helpful tools that make their lives easier. There are plenty of stories about &lt;a href="http://www.nydailynews.com/news/national/blind-12-year-old-sees-mom-time-electronic-glasses-article-1.2618270"&gt;kids seeing their parents for the first time&lt;/a&gt; or even a &lt;a href="http://www.nydailynews.com/news/national/blind-12-year-old-sees-mom-time-electronic-glasses-article-1.2618270"&gt;second chance to see their own wedding&lt;/a&gt;. While it cannot help blind users drive, it can significantly improve their vision under some circumstances. &lt;/p&gt;
&lt;p&gt;The headset itself mixes Augmented Reality and Virtual Reality together in an attempt to make an immersive experience that accurately represents the real world. It has two displays that the user looks into which show a feed from a front-facing camera. The device will modify the image (zooming, changing contrast, and OCR are just a few examples ) with the intention of making it easier for the user to see. The headset gives users some peripheral vision - allowing people to walk around and perform everyday tasks while wearing the device.&lt;/p&gt;
&lt;p&gt;The headset runs a custom version of Android. Even though all the menus and interfaces use Android views under the hood, we had a custom menu system. The custom system allows us to customize the interface as we see fit - which in turn gives the users a lot of options. All the options are necessary because each visual impairment is unique, and each user needs a different set of settings. While Android provides a good framework for apps it lacks some accessibility options eSight users require. &lt;/p&gt;</content></entry><entry><title>Objectives</title><link href="/objectives.html" rel="alternate"></link><published>2015-11-04T00:00:00+01:00</published><updated>2015-11-04T00:00:00+01:00</updated><author><name>Nick Beirne</name></author><id>tag:None,2015-11-04:/objectives.html</id><summary type="html">&lt;p&gt;Over the course of the term I wanted to focus on inter-personal skills. In previous terms I was working mostly on my own - so I went into eSight hoping that I would be in a team. While that technically happened, my work mostly focuses on an Android app being developed …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Over the course of the term I wanted to focus on inter-personal skills. In previous terms I was working mostly on my own - so I went into eSight hoping that I would be in a team. While that technically happened, my work mostly focuses on an Android app being developed solely by myself. &lt;/p&gt;
&lt;p&gt;Android was completely new to me, going into this term. I had previous experience with iOS, and I found android was not a huge leap. Most of the basic concepts are similar, but Android provides some extra libraries for doing background tasks. At the end of my term I had experience designing an Android app from scratch (mostly, I did a full redesign of an existing app) and I now know the basics of development. &lt;/p&gt;
&lt;p&gt;One of my projects was to port the eStreamer Android App to iOS. Since I had done a fair amount of iOS programming before I decided to learn Swift. The Language is fairly interesting, taking concepts from Object Oriented and Functional languages. Overall it was easy to learn because of its similarity to Haskell and Objective-C. I hope that with time it becomes the preferred language of more people. &lt;/p&gt;
&lt;p&gt;Even though in general I did not achieve the goal of being part of a team, I did make efforts to improve my communication skills. I made sure to keep our bug tracker up-to-date, and I used the same workflow that would be used in a larger team. I even pair-programmed a couple of times! The skills I learned here will help in the future when I must be integrated into a full engineering team, but that's simply something that has not happened in my co-op experience. &lt;/p&gt;</content></entry><entry><title>Pairing</title><link href="/pairing.html" rel="alternate"></link><published>2015-11-04T00:00:00+01:00</published><updated>2015-11-04T00:00:00+01:00</updated><author><name>Nick Beirne</name></author><id>tag:None,2015-11-04:/pairing.html</id><summary type="html">&lt;p&gt;The eSight device allows remote access for a variety of purposes. The eStreamer app can stream video from the eSight unit, and it can stream the phone's screen to the eSight. It also allows remote control from the app, so a user can use their phone to manipulate menu systems …&lt;/p&gt;</summary><content type="html">&lt;p&gt;The eSight device allows remote access for a variety of purposes. The eStreamer app can stream video from the eSight unit, and it can stream the phone's screen to the eSight. It also allows remote control from the app, so a user can use their phone to manipulate menu systems rather than the hardware controller. Given that eStreamer can give away personal information about the user it is imperative that it has security measures put in place.&lt;/p&gt;
&lt;p&gt;Initially the connection that allowed control of the eSight device was completely unauthenticated. It would allow anyone to connect and take over the device without warning. My goal was to make these connections secure. &lt;/p&gt;
&lt;h4&gt;The Diffie Hellman Key Exchange&lt;/h4&gt;
&lt;p&gt;Whitfield Diffie and Martin Hellman came up with the &lt;a href="https://en.wikipedia.org/wiki/Diffie%E2%80%93Hellman_key_exchange"&gt;Diffie Hellman Key Exchange&lt;/a&gt; to allow two parties to have secure communication. We used it to generate an "authentication" key that would be used to authenticate any further connections.&lt;/p&gt;
&lt;p&gt;A simplified process for Diffie Hellman:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;The eSight Device and eStreamer have a shared General Key.&lt;/li&gt;
&lt;li&gt;The eSight Device generates a private key, which is combines with the General Key to make a public key.&lt;/li&gt;
&lt;li&gt;eStreamer generates a public/private key pair using the same method as above.&lt;/li&gt;
&lt;li&gt;The eSight device sends their public key to eStreamer.&lt;/li&gt;
&lt;li&gt;eStreamer sends their public key to the eSight device.&lt;/li&gt;
&lt;li&gt;A private shared key is generated from adding the private keys to the public key of the other party.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The private shared key is the General Key, combined with the private keys of both the eSight device and eStreamer. It is impossible to derive the shared private key in an efficient way without those three pieces of information. Once a shared key is generated, both parties store it. Whenever a connection is initiated the eSight device sends a "challenge" to the tablet - and the tablet must encrypt the challenge and send it back. If the eSight device determines the encryption is bad, it rejects the connection.&lt;/p&gt;
&lt;p&gt;Additionally, before the key is stored, the eSight devices asks the user to "allow", "remember", or "deny" the connection. When allowed, the connection proceeds but the key is not put into storage and this popup appears on subsequent connections. If remembered, the key is put into storage for future use. They key exchange allows us to remember the device in a secure way, while the prompt gives an extra level of safety for unknown connections.&lt;/p&gt;</content></entry><entry><title>Performance and Lag</title><link href="/performance-and-lag.html" rel="alternate"></link><published>2015-11-04T00:00:00+01:00</published><updated>2015-11-04T00:00:00+01:00</updated><author><name>Nick Beirne</name></author><id>tag:None,2015-11-04:/performance-and-lag.html</id><summary type="html">&lt;p&gt;From the start of my term there was always issues with lag while streaming. During demonstrations of the eSight device the app was  often unusable because of interference. Issues like that are very difficult to fix because they are an outcome of the physical state of a place rather than …&lt;/p&gt;</summary><content type="html">&lt;p&gt;From the start of my term there was always issues with lag while streaming. During demonstrations of the eSight device the app was  often unusable because of interference. Issues like that are very difficult to fix because they are an outcome of the physical state of a place rather than a software bug. &lt;/p&gt;
&lt;p&gt;The flow of data through the encoder is as follows:
Android Surface -&amp;gt; Encoder -&amp;gt; Socket/Bluetooth Output&lt;/p&gt;
&lt;p&gt;Drawing a picture to the surface gives the encoder data, which we can then write to a network connection. This model works, but I discovered that if the encoder is not read from fast enough it will eventually stop the main thread. That's not a huge problem until you realize that writing to a socket is &lt;em&gt;blocking&lt;/em&gt;. You must also write all data you receive from the encoder out, otherwise the stream gets corrupted. Therefore, there must be some other module between the encoder and output that can stop data from being rendered to the surface. &lt;/p&gt;
&lt;p&gt;Proposed change:
Android Surface -&amp;gt; Encoder -&amp;gt; ThreadedBufferWriter -&amp;gt; Socket/Bluetooth Output
            ------------ isReady ---/&lt;/p&gt;
&lt;p&gt;In the above diagram ThreadedBufferWriter all the data from the encoder, and buffers it for the output. The socket output module reads data from that buffer and writes it as fast as it can, but when it slows its OK. ThreadedBufferWriter does not drop any data itself, but it can make isReady return false - which will stop data being rendered. Any lag optimization code can now be contained within the Encoder (setting bitrate, resolution, etc) and ThreadedBufferWriter (buffering, what happens when there is lag, etc). &lt;/p&gt;
&lt;p&gt;From here on out all that needed to happen was optimizing parameters. Through experimentation I found that bluetooth could handle a bitrate of 500kb/s, slightly lower than what we had set before. I originally made the ThreadedBufferWriter buffer about 30 frames of data, then it would stop rendering until it hit 15 frames. That worked, but it would cause weird jumping sometimes when the encoder started to generate lots of data. After some trial-and-error I found that changing the behaviour to stop rendering until the buffer was completely empty worked far better. After all my work the lag appeared to be largely solved, but it's very difficult to test that kind of behaviour. &lt;/p&gt;</content></entry><entry><title>Projects</title><link href="/projects.html" rel="alternate"></link><published>2015-11-04T00:00:00+01:00</published><updated>2015-11-04T00:00:00+01:00</updated><author><name>Nick Beirne</name></author><id>tag:None,2015-11-04:/projects.html</id><summary type="html">&lt;p&gt;Over the course of my term at eSight I worked on several distinct but related projects.
All of them are focusing on the eStreamer app. It's basic purpose is to allow streaming from
an android device to the eSight Eyewear device. When I started work on the app it was …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Over the course of my term at eSight I worked on several distinct but related projects.
All of them are focusing on the eStreamer app. It's basic purpose is to allow streaming from
an android device to the eSight Eyewear device. When I started work on the app it was very basic,
but by the end of my term it had the following features:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Stream the eSight camera to the Android Devices&lt;/li&gt;
&lt;li&gt;Stream the Android Device's camera to the eSight Display&lt;/li&gt;
&lt;li&gt;Cast the Android Device's screen to the eSight Display&lt;/li&gt;
&lt;li&gt;Pair an Android Device with the eSight Device &lt;/li&gt;
&lt;li&gt;Stream over wifi OR Bluetooth.&lt;/li&gt;
&lt;li&gt;iOS and Mac OS X support.&lt;/li&gt;
&lt;li&gt;Remote Control of the eSight Device from the Android phone.&lt;/li&gt;
&lt;/ul&gt;</content></entry><entry><title>Supporting Bluetooth and Wifi</title><link href="/supporting-bluetooth-and-wifi.html" rel="alternate"></link><published>2015-11-04T00:00:00+01:00</published><updated>2015-11-04T00:00:00+01:00</updated><author><name>Nick Beirne</name></author><id>tag:None,2015-11-04:/supporting-bluetooth-and-wifi.html</id><summary type="html">&lt;p&gt;The eSight Eyewear has hardware support for both Wifi and Bluetooth networks - but the software only supported wifi! eStreamer itself worked by the HMD acting as a router, and the app would connect to that network in order to stream. While that process made it easier to establish the connection …&lt;/p&gt;</summary><content type="html">&lt;p&gt;The eSight Eyewear has hardware support for both Wifi and Bluetooth networks - but the software only supported wifi! eStreamer itself worked by the HMD acting as a router, and the app would connect to that network in order to stream. While that process made it easier to establish the connection[1] it had several downsides. First: while connected it was impossible to use the internet on the phone/tablet. Second: Wifi in general is prone to interference and slow-downs [2]. &lt;/p&gt;
&lt;p&gt;Supporting Wifi and Bluetooth in software seems like an easy task; but it ended up requiring a major refactor. I wanted to be able to compose small pieces of code together to create a larger stream. Since we had no access to &lt;a href="https://dzone.com/articles/functional-programming-java-8"&gt;Java 8 Functional Programming&lt;/a&gt; I created my own similar library. It supported the concept of a "producer", "consumer", and "Function" that could map values. &lt;/p&gt;
&lt;p&gt;A wifi and bluetooth connection followed both the "producer" and "consumer" interface for writing and reading values respectively. Therefore, in the stream code everything else could be exactly the same. The buffering, encoding, and stream management is generic enough to handle any kind of producer/consumer - it could be Bluetooth, Wifi, or even it could be outputting to a file if necessary. &lt;/p&gt;
&lt;p&gt;The interfaces went through several refactors and redesigns. The eventual result ended up removing about 200 lines of code while at the same time adding support for Bluetooth. The pairing protocol, message handling, and even streaming code is shared no matter what type the connection has. The only difference between wifi and bluetooth is about 100 lines of Java which deal with socket/Bluetooth specific output and input.&lt;/p&gt;
&lt;p&gt;[1] Connecting to a network from the HMD was tedious. Entering passwords was difficult, and scanning for an HMD currently on a network was technically possible however it was inconsistent and error-prone.&lt;/p&gt;
&lt;p&gt;[2] see Performance and Lag Issues&lt;/p&gt;</content></entry></feed>